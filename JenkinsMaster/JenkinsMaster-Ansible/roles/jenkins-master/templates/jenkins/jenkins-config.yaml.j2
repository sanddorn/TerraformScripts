jenkins:
  agentProtocols:
    - "JNLP4-connect"
    - "Ping"
  disableRememberMe: false
  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false
  labelString: "build, built-in"
  mode: EXCLUSIVE
  clouds:
    - hetzner:
        credentialsId: "hetzner"
        instanceCapStr: "2"
        name: "hetzner"
        serverTemplates:
          - bootDeadline: 15
            connectivity: "both"
            connector:
              root:
                connectionMethod: "public"
                sshCredentialsId: "jenkins-ssh"
            image: "jenkins=agent"
            labelStr: "ash,cpx31"
            location: "ash"
            mode: NORMAL
            name: "agent"
            network: "net=jenkins"
            numExecutors: 8
            primaryIp: "default"
            remoteFs: "/Jenkins"
            serverType: "cpx31"
            shutdownPolicy: "hour-wrap"
  numExecutors: {{ ansible_facts.processor_vcpus * 2 | int }}
  primaryView:
    all:
      name: "all"
  quietPeriod: 5
  scmCheckoutRetryCount: 0
  globalNodeProperties:
  {% if jenkins_extra_path is defined %}
    - envVars:
        env:
            - key: PATH
              value: "{{ jenkins_extra_path }}"
  {% endif %}
  securityRealm:
    oic:
      authorizationServerUrl: "https://{{ jenkins_oicd_server }}/realms/{{ jenkins_oicd_realm }}/protocol/openid-connect/auth"
      automanualconfigure: "auto"
      clientId: "{{ jenkins_oicd_client_id }}"
      clientSecret: "{{ jenkins_oicd_client_secret }}"
      disableSslVerification: false
      endSessionEndpoint: "https://{{ jenkins_oicd_server }}/realms/{{ jenkins_oicd_realm }}/protocol/openid-connect/logout"
      fullNameFieldName: "name"
      groupsFieldName: "email"
      userNameField: "preferred_username"
      logoutFromOpenidProvider: false
      scopes: "web-origins acr address phone openid roles profile offline_access microprofile-jwt\
            \ email"
      tokenAuthMethod: "client_secret_post"
      tokenServerUrl: "https://{{ jenkins_oicd_server }}/realms/{{ jenkins_oicd_realm }}/protocol/openid-connect/token"
      userInfoServerUrl: "https://{{ jenkins_oicd_server }}/realms/{{ jenkins_oicd_realm }}/protocol/openid-connect/userinfo"
      wellKnownOpenIDConfigurationUrl: "https://{{ jenkins_oicd_server }}/realms/{{ jenkins_oicd_realm }}/.well-known/openid-configuration"
  slaveAgentPort: 0
  updateCenter:
    sites:
      - id: "default"
        url: "https://updates.jenkins.io/update-center.json"
  views:
    - all:
        name: "all"
security:
  scriptApproval:
    approvedSignatures:
      - "method com.cloudbees.plugins.credentials.common.IdCredentials getId"
      - "method com.dabsquared.gitlabjenkins.connection.GitLabApiToken getApiToken"
      - "method groovy.text.Template make java.util.Map"
      - "method groovy.text.TemplateEngine createTemplate java.lang.String"
      - "method hudson.model.Computer getNode"
      - "method hudson.model.Label getName"
      - "method hudson.model.Node getSelfLabel"
      - "method java.net.HttpURLConnection getResponseCode"
      - "method java.net.URL openConnection"
      - "method jenkins.model.Jenkins getComputers"
      - "staticField hudson.security.ACL SYSTEM"
      - "staticMethod com.cloudbees.plugins.credentials.CredentialsProvider lookupCredentials\
       \ java.lang.Class hudson.model.Item org.acegisecurity.Authentication"
      - "staticMethod com.cloudbees.plugins.credentials.CredentialsProvider lookupCredentials\
       \ java.lang.Class hudson.model.ItemGroup org.acegisecurity.Authentication"
      - "staticMethod jenkins.model.Jenkins getInstance"
      - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods getText java.net.URL"
  globalJobDslSecurityConfiguration:
    useScriptSecurity: false
credentials:
  system:
    domainCredentials:
      - credentials:
          - basicSSHUserPrivateKey:
              scope: GLOBAL
              id: "gitlab-ssh"
              username: "git"
              passphrase: "" #Doable, but not recommended
              description: ""
              privateKeySource:
                directEntry:
                  privateKey: |
                    {{ jenkins_private_ssh_key | indent( width=20) }}
          - basicSSHUserPrivateKey:
              scope: GLOBAL
              id: "ansible-ssh"
              username: "ansible"
              passphrase: "" #Doable, but not recommended
              description: ""
              privateKeySource:
                directEntry:
                  privateKey: |
                    {{ jenkins_private_ssh_key | indent( width=20) }}
          - basicSSHUserPrivateKey:
              scope: GLOBAL
              id: "jenkins-ssh"
              username: "jenkins"
              passphrase: "" #Doable, but not recommended
              description: ""
              privateKeySource:
                directEntry:
                  privateKey: |
                    {{ jenkins_private_ssh_key | indent( width=20) }}
          - gitLabApiTokenImpl:
              scope: GLOBAL
              id: "gitlab-api"
              apiToken: "{{ jenkins_gitlab_api_token }}"
          - usernamePassword:
              description: "Upload user for nexus"
              id: "nexus-deployer"
              password: "{{ jenkins_nexus_userpassword }}"
              scope: GLOBAL
              username: "jenkins"
          - string:
              id: "sonar-token"
              scope: GLOBAL
              secret: "{{ jenkins_sonarqube_token }}"
          - string:
              id: "slack-token"
              scope: GLOBAL
              secret: "{{ jenkins_slack_token }}"
          - string:
              id: "hetzner"
              scope: GLOBAL
              secret: "{{ jenkins_terraform_api_token }}"
          - string:
              id: "github-token"
              scope: GLOBAL
              secret: "{{ jenkins_github_token }}"
          - string:
              id: "frontend-cypress-key"
              scope: GLOBAL
              secret: "{{ jenkins_frontend_cypress_key }}"
          - string:
              id: "e2e-cypress-key"
              scope: GLOBAL
              secret: "{{ jenkins_e2e_cypress_key }}"
unclassified:
  gitLabConnectionConfig:
    connections:
      - clientBuilderId: "autodetect"
        connectionTimeout: 10
        ignoreCertificateErrors: false
        readTimeout: 10
        name: "gitlab"
        apiTokenId: "gitlab-api"
        url: "https://gitlab.bermuda.de"
  globalConfigFiles:
    configs:
      - npm:
          comment: "user config"
          content: "; Force npm to always require authentication when accessing the\
          \ registry, even for GET requests.\n; always-auth = false\n\n; The location\
          \ of npm's cache directory. See npm-cache (https://docs.npmjs.com/cli/cache)\n\
          ; Default: Windows: %AppData%\\npm-cache, Posix: ~/.npm\n; cache = \n\n\
          ; What level of logs to report. On failure, all logs are written to npm-debug.log\
          \ in the current working directory.\n; Any logs of a higher level than the\
          \ setting are shown. The default is \"warn\", which shows warn and error\
          \ output.\n; Default: \"warn\"\n; Values: \"silent\", \"error\", \"warn\"\
          , \"http\", \"info\", \"verbose\", \"silly\"\n; loglevel = \n\n; The config\
          \ file to read for global config options.\n; Default: {prefix}/etc/npmrc\n\
          ; globalconfig = \n\n; The location to install global items. If set on the\
          \ command line, then it forces non-global commands to run in the specified\
          \ folder.\n; Default: see npm-folders (https://docs.npmjs.com/files/folders)\n\
          ; prefix = \n\n; The base URL of the npm package registry.\n; Default: https://registry.npmjs.org/\n\
          ; registry = \n\n; If set to false, then ignore npm-shrinkwrap.json files\
          \ when installing.\n; Default: true\n; shrinkwrap ="
          id: "npm-config"
          name: "MyNpmrcConfig"
          providerId: "jenkins.plugins.nodejs.configfiles.NPMConfig"
          registries:
            - credentialsId: "nexus-deployer"
              hasScopes: false
              url: "https://nexus.bermuda.de/repository/npm-registry/"
      - globalMavenSettings:
          comment: "Global settings"
          content: |
            <settings xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd">
                <mirrors xmlns="http://maven.apache.org/SETTINGS/1.1.0">
              <mirror>
                    <mirrorOf>*</mirrorOf>
                    <name>Bermuda Nexus</name>
                    <url>https://nexus.bermuda.de/repository/maven-public/</url>
                    <id>bermuda-mirror</id>
                  </mirror>
              </mirrors>
              <profiles>
                <profile>
                 <id>nexus-bermuda</id>
                 <activation>
                    <activeByDefault>true</activeByDefault>
                 </activation>
                 <repositories>
                   <repository>
                     <releases />
                     <snapshots>
                       <enabled>false</enabled>
                     </snapshots>
                     <id>bermuda-release</id>
                     <url>https://nexus.bermuda.de/repository/bermuda-maven-release</url>
                  </repository>
                  <repository>
                    <releases>
                      <enabled>false</enabled>
                    </releases>
                    <snapshots />
                    <id>bermuda-snapshot</id>
                    <url>https://nexus.bermuda.de/repository/bermuda-maven-snapshot</url>
                  </repository>
                </repositories>
               </profile>
              </profiles>
            </settings>
          id: "global-maven-settings"
          isReplaceAll: true
          name: "MyGlobalSettings"
          providerId: "org.jenkinsci.plugins.configfiles.maven.GlobalMavenSettingsConfig"
          serverCredentialMappings:
            - credentialsId: "nexus-deployer"
              serverId: "bermuda-mirror"
            - credentialsId: "nexus-deployer"
              serverId: "bermuda-release"
            - credentialsId: "nexus-deployer"
              serverId: "bermuda-snapshot"
  globalLibraries:
    libraries:
      - defaultVersion: "master"
        implicit: true
        includeInChangesets: false
        name: "jenkins-shared-libraries"
        retriever:
          modernSCM:
            scm:
              git:
                credentialsId: "gitlab-ssh"
                remote: "git@gitlab.bermuda.de:infrastructure/deploymenthistory-jenkinslibrary.git"
  location:
    adminAddress: "{{ jenkins_user_name }} <{{ jenkins_user_email }}>"
    url: "{% if jenkins_url is defined %}{{ jenkins_url }}{% else %}http://{{ inventory_hostname }}:{{ jenkins_http_port }}/{% endif %}"
  shell:
    shell: "/bin/bash"
  slackNotifier:
    botUser: false
    room: "Jenkins"
    sendAsText: false
    teamDomain: "bermuda-hq"
    tokenCredentialId: "slack-token"
  timestamper:
    allPipelines: true
  sonarGlobalConfiguration:
    buildWrapperEnabled: true
    installations:
      - credentialsId: "sonarqube-token"
        mojoVersion: "3.6.1.1688"
        name: "Sonarqube.bermuda.de"
        serverUrl: "https://development.bermuda.de/sonar"
        triggers:
          skipScmCause: false
          skipUpstreamCause: false
tool:
  ansible:
    installations:
      - name: "Ansible-2.9.5"
        properties:
          - installSource:
              installers:
                - command:
                    command: "/usr/bin/pip3 install setuptools ansible"
                    toolHome: "/home/jenkins/.local/bin/"
  git:
    installations:
      - home: "git"
        name: "Default"
  go:
    installations:
      - name: "go-main"
        properties:
          - installSource:
              installers:
                - golangInstaller:
                    id: "1.15.6"
  jdk:
    installations:
      - name: "JDK11"
        properties:
          - installSource:
              installers:
                - zip:
                    subdir: "jdk-11.0.10+9"
                    url: "https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.10%2B9/OpenJDK11U-jdk_x64_linux_hotspot_11.0.10_9.tar.gz"
      - name: "JDK17"
        properties:
          - installSource:
              installers:
                - zip:
                    subdir: "jdk-17.0.4.1+1"
                    url: "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.4.1+1/OpenJDK17U-jdk_x64_linux_hotspot_17.0.4.1_1.tar.gz"

  maven:
    installations:
      - name: "Maven 3.5"
        properties:
          - installSource:
              installers:
                - maven:
                    id: "3.5.2"
      - name: "Maven 3"
        properties:
          - installSource:
              installers:
                - maven:
                    id: "3.8.6"
  mavenGlobalConfig:
    globalSettingsProvider:
      mvn:
        settingsConfigId: "global-maven-settings"
    settingsProvider: "standard"
  nodejs:
    installations:
      - name: "Node"
        properties:
          - installSource:
              installers:
                - nodeJSInstaller:
                    id: "16.17.0"
                    npmPackagesRefreshHours: 72
  sonarRunnerInstallation:
    installations:
      - name: "sonarqube-scanner"
        properties:
          - installSource:
              installers:
                - sonarRunnerInstaller:
                    id: "4.6.0.2311"
{% include jenkins_configuration_as_code_template ignore missing %}
